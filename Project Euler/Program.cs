using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Project_Euler
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(Problem4().ToString());
            Console.ReadKey();
        }

        static int Problem1()
            //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
            //The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
        {
            HashSet<int> threes = new HashSet<int>();
            HashSet<int> fives = new HashSet<int>();
            for (int i=0; i<1000; i++)
            {
                if ((i % 3) == 0) threes.Add(i);
                if ((i % 5) == 0) fives.Add(i);
            }
            return threes.Union<int>(fives).Sum();
        }

        static int Problem2()
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms.
            //By starting with 1 and 2, the first 10 terms will be:
            //    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            //By considering the terms in the Fibonacci sequence whose values do not exceed four million,
            //find the sum of the even-valued terms.
        {
            int runningSum = 0;
            for (int last = 0, current = 1; current < 4000000; current = last + (last = current))
            {
                //Fibonacci for loop =D
                if(current % 2 == 0) { runningSum += current; };
            }
            return runningSum;
        }

        static long Problem3()
            //The prime factors of 13195 are 5, 7, 13 and 29.
            //What is the largest prime factor of the number 600851475143 ?
        {
            long sqrt = (long)Math.Sqrt(600851475143); // A prime fator of X can never be greater than sqrt(X)
            long remainder = 600851475143;
            long leastPrimeFactor = 0;
            for (long i = 2; i < sqrt; i++)
            {
                while (remainder % i == 0)
                {
                    remainder /= i;
                }
                if (remainder == 1)
                {
                    leastPrimeFactor = i;
                    break;
                }
            }
            return leastPrimeFactor;
        }

        static int Problem4()
        //A palindromic number reads the same both ways.
        //The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        //Find the largest palindrome made from the product of two 3-digit numbers.
        {
            return 0;
        }

    }
}
